// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Solution = require("../Solution.bs.js");

function toHand(x) {
  switch (x) {
    case "A" :
    case "X" :
        return /* Rock */0;
    case "B" :
    case "Y" :
        return /* Paper */1;
    case "C" :
    case "Z" :
        return /* Scissors */2;
    default:
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Day02.res",
              9,
              9
            ],
            Error: new Error()
          };
  }
}

function toResult(x) {
  switch (x) {
    case "X" :
        return /* Loss */2;
    case "Y" :
        return /* Draw */1;
    case "Z" :
        return /* Win */0;
    default:
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Day02.res",
              17,
              9
            ],
            Error: new Error()
          };
  }
}

function play(x, y) {
  switch (x) {
    case /* Rock */0 :
        switch (y) {
          case /* Rock */0 :
              return /* Draw */1;
          case /* Paper */1 :
              return /* Win */0;
          case /* Scissors */2 :
              return /* Loss */2;
          
        }
    case /* Paper */1 :
        switch (y) {
          case /* Rock */0 :
              return /* Loss */2;
          case /* Paper */1 :
              return /* Draw */1;
          case /* Scissors */2 :
              return /* Win */0;
          
        }
    case /* Scissors */2 :
        switch (y) {
          case /* Rock */0 :
              return /* Win */0;
          case /* Paper */1 :
              return /* Loss */2;
          case /* Scissors */2 :
              return /* Draw */1;
          
        }
    
  }
}

function toScore(hand, play) {
  var handScore = hand + 1 | 0;
  var playScore;
  switch (play) {
    case /* Win */0 :
        playScore = 6;
        break;
    case /* Draw */1 :
        playScore = 3;
        break;
    case /* Loss */2 :
        playScore = 0;
        break;
    
  }
  return handScore + playScore | 0;
}

function toExpectedPlay(hand, result) {
  switch (hand) {
    case /* Rock */0 :
        switch (result) {
          case /* Win */0 :
              return /* Paper */1;
          case /* Draw */1 :
              return /* Rock */0;
          case /* Loss */2 :
              return /* Scissors */2;
          
        }
    case /* Paper */1 :
        switch (result) {
          case /* Win */0 :
              return /* Scissors */2;
          case /* Draw */1 :
              return /* Paper */1;
          case /* Loss */2 :
              return /* Rock */0;
          
        }
    case /* Scissors */2 :
        switch (result) {
          case /* Win */0 :
              return /* Rock */0;
          case /* Draw */1 :
              return /* Scissors */2;
          case /* Loss */2 :
              return /* Paper */1;
          
        }
    
  }
}

function part01(input) {
  return input.split("\n").reduce((function (acc, i) {
                var plays = i.split(" ").map(toHand);
                if (plays.length !== 2) {
                  return acc;
                }
                var opponent = plays[0];
                var player = plays[1];
                var outcome = play(opponent, player);
                return acc + toScore(player, outcome) | 0;
              }), 0);
}

function part02(input) {
  return input.split("\n").reduce((function (acc, i) {
                var plays = i.split(" ");
                if (plays.length !== 2) {
                  return acc;
                }
                var opponent = plays[0];
                var result = plays[1];
                var opponentHand = toHand(opponent);
                var expectedResult = toResult(result);
                var expectedPlay = toExpectedPlay(opponentHand, expectedResult);
                return acc + toScore(expectedPlay, expectedResult) | 0;
              }), 0);
}

Solution.make(part01, "day02/input");

Solution.make(part02, "day02/input");

exports.toHand = toHand;
exports.toResult = toResult;
exports.play = play;
exports.toScore = toScore;
exports.toExpectedPlay = toExpectedPlay;
exports.part01 = part01;
exports.part02 = part02;
/*  Not a pure module */
