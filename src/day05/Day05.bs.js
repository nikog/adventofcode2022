// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Path = require("path");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_array = require("rescript/lib/js/caml_array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

var input = Fs.readFileSync(Path.resolve(__dirname, "stacks"), "utf8");

var moves = Fs.readFileSync(Path.resolve(__dirname, "input"), "utf8");

function toStr(list) {
  return Belt_List.reduce(list, "", (function (acc, i) {
                return acc + i;
              }));
}

var stacks = input.split("\n").reduce((function (acc, line) {
          return Belt_Option.getExn(Caml_option.null_to_opt(line.match(/(.{3})(?:\s|\n|$)/g))).map(function (x) {
                        return Belt_Option.getExn(x).replace(/[\s|\[|\]]/g, "");
                      }).reduce((function (acc2, value, i) {
                        if (value === "") {
                          return acc2;
                        } else {
                          return acc2.map(function (val, j) {
                                      if (j === i) {
                                        return Belt_List.add(val, value);
                                      } else {
                                        return val;
                                      }
                                    });
                        }
                      }), acc);
        }), Belt_Array.make(9, /* [] */0)).map(Belt_List.reverse);

function $$int(str) {
  return Belt_Option.getExn(Belt_Int.fromString(str));
}

var orders = moves.split("\n").reduce((function (acc, x) {
        var order = x.match(/\d+/g);
        if (order !== null && order.length === 3) {
          var amount = order[0];
          if (amount !== undefined) {
            var from = order[1];
            if (from !== undefined) {
              var to = order[2];
              if (to !== undefined) {
                var splits = Belt_List.splitAt(Caml_array.get(acc, Belt_Option.getExn(Belt_Int.fromString(from)) - 1 | 0), Belt_Option.getExn(Belt_Int.fromString(amount)));
                if (splits !== undefined) {
                  Caml_array.set(acc, Belt_Option.getExn(Belt_Int.fromString(from)) - 1 | 0, splits[1]);
                  Caml_array.set(acc, Belt_Option.getExn(Belt_Int.fromString(to)) - 1 | 0, Belt_List.concat(splits[0], Caml_array.get(acc, Belt_Option.getExn(Belt_Int.fromString(to)) - 1 | 0)));
                  return acc;
                }
                throw {
                      RE_EXN_ID: "Assert_failure",
                      _1: [
                        "Day05.res",
                        38,
                        18
                      ],
                      Error: new Error()
                    };
              }
              
            }
            
          }
          
        }
        throw {
              RE_EXN_ID: "Assert_failure",
              _1: [
                "Day05.res",
                42,
                11
              ],
              Error: new Error()
            };
      }), stacks);

var result = orders.reduce((function (acc, i) {
        return acc + Belt_Option.getWithDefault(Belt_List.head(i), " ");
      }), "");

console.log(result);

exports.input = input;
exports.moves = moves;
exports.toStr = toStr;
exports.stacks = stacks;
exports.$$int = $$int;
exports.orders = orders;
exports.result = result;
/* input Not a pure module */
