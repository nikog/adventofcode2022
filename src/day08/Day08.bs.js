// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Solution = require("../Solution.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");

function traverse(grid, fn) {
  grid.forEach(function (line, y) {
        line.forEach(function (tree, x) {
              Curry._3(fn, tree, [
                    x,
                    y
                  ], grid);
            });
      });
}

function jooh(arr) {
  return arr.reduce((function (param, i) {
                var count = param[1];
                var max = param[0];
                if (i > max) {
                  return [
                          i,
                          count + 1 | 0
                        ];
                } else {
                  return [
                          max,
                          count
                        ];
                }
              }), [
              0,
              0
            ]);
}

function part01(input) {
  var count = {
    contents: 0
  };
  var isHighest = function (tree, _param, _param$1, grid) {
    while(true) {
      var param = _param;
      var param$1 = _param$1;
      var dY = param$1[1];
      var dX = param$1[0];
      var y = param[1];
      var x = param[0];
      var otherTree = Belt_Array.get(Belt_Option.getWithDefault(Belt_Array.get(grid, y + dY | 0), []), x + dX | 0);
      if (otherTree === undefined) {
        return true;
      }
      var otherTree$1 = Caml_option.valFromOption(otherTree);
      if (Caml_obj.greaterthan(tree, otherTree$1)) {
        _param$1 = [
          dX,
          dY
        ];
        _param = [
          x + dX | 0,
          y + dY | 0
        ];
        continue ;
      }
      if (Caml_obj.lessequal(tree, otherTree$1)) {
        return false;
      }
      console.log(Belt_Array.get(Belt_Option.getWithDefault(Belt_Array.get(grid, y + dY | 0), []), x + dX | 0));
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Day08.res",
              24,
              8
            ],
            Error: new Error()
          };
    };
  };
  traverse(input.split("\n").map(function (line) {
            return line.split("");
          }), (function (tree, param, grid) {
          var y = param[1];
          var x = param[0];
          var highest = isHighest(tree, [
                x,
                y
              ], [
                1,
                0
              ], grid) || isHighest(tree, [
                x,
                y
              ], [
                -1,
                0
              ], grid) || isHighest(tree, [
                x,
                y
              ], [
                0,
                1
              ], grid) || isHighest(tree, [
                x,
                y
              ], [
                0,
                -1
              ], grid);
          if (highest) {
            count.contents = count.contents + 1 | 0;
            return ;
          }
          
        }));
  return count;
}

function part02(input) {
  var count = {
    contents: 0
  };
  var isHighest = function (tree, _param, _param$1, grid, _score) {
    while(true) {
      var param = _param;
      var param$1 = _param$1;
      var score = _score;
      var dY = param$1[1];
      var dX = param$1[0];
      var y = param[1];
      var x = param[0];
      var otherTree = Belt_Array.get(Belt_Option.getWithDefault(Belt_Array.get(grid, y + dY | 0), []), x + dX | 0);
      if (otherTree === undefined) {
        return score;
      }
      var otherTree$1 = Caml_option.valFromOption(otherTree);
      if (Caml_obj.greaterthan(tree, otherTree$1)) {
        _score = score + 1 | 0;
        _param$1 = [
          dX,
          dY
        ];
        _param = [
          x + dX | 0,
          y + dY | 0
        ];
        continue ;
      }
      if (Caml_obj.lessequal(tree, otherTree$1)) {
        return score + 1 | 0;
      }
      throw {
            RE_EXN_ID: "Assert_failure",
            _1: [
              "Day08.res",
              56,
              11
            ],
            Error: new Error()
          };
    };
  };
  traverse(input.split("\n").map(function (line) {
            return line.split("");
          }), (function (tree, param, grid) {
          var y = param[1];
          var x = param[0];
          var scenicScore = Math.imul(Math.imul(Math.imul(isHighest(tree, [
                            x,
                            y
                          ], [
                            1,
                            0
                          ], grid, 0), isHighest(tree, [
                            x,
                            y
                          ], [
                            -1,
                            0
                          ], grid, 0)), isHighest(tree, [
                        x,
                        y
                      ], [
                        0,
                        1
                      ], grid, 0)), isHighest(tree, [
                    x,
                    y
                  ], [
                    0,
                    -1
                  ], grid, 0));
          if (scenicScore > count.contents) {
            count.contents = scenicScore;
            return ;
          }
          
        }));
  return count;
}

Solution.make(part01, "day08/input");

Solution.make(part02, "day08/input");

exports.traverse = traverse;
exports.jooh = jooh;
exports.part01 = part01;
exports.part02 = part02;
/*  Not a pure module */
